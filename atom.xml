<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-20T04:56:46.768Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/20/hello-world/"/>
    <id>http://example.com/2022/10/20/hello-world/</id>
    <published>2022-10-20T04:56:46.768Z</published>
    <updated>2022-10-20T04:56:46.768Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring核心Ioc和aop</title>
    <link href="http://example.com/2022/07/01/Spring%E6%A0%B8%E5%BF%83Ioc%E5%92%8Caop-iocaop/"/>
    <id>http://example.com/2022/07/01/Spring%E6%A0%B8%E5%BF%83Ioc%E5%92%8Caop-iocaop/</id>
    <published>2022-07-01T02:43:19.706Z</published>
    <updated>2022-07-01T13:16:49.860Z</updated>
    
    <content type="html"><![CDATA[<p>Spring核心Ioc和aop</p><p>通过xml文件的方式实现Ioc</p><p>IoC是 Spring全家桶各个功能模块的基础，创建对象的容器。</p><p>控制反转，将对象的创建进行反转，常规情况下，对象都是 开发者手动创建的，使用 IoC 开发者不再需要创建对象，而是由 IoC 容器根据需求自动创建项目所需要的对象。不用 IoC：所有对象开发者自己创建使用 IoC：对象不用开发者创建，而是交给 Spring 框架来完成</p><p>引入相关依赖</p><pre><code>        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.3.15&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.24&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p>创建实体类</p><pre><code>package com.gls.entity;import lombok.Data;import org.springframework.stereotype.Component;/** * @author guolisen * @date 2022年07月01日 1:06 */@Data@Componentpublic class DataConfig &#123;    private String url;    private String driverName;    private String username;    private String password;&#125;</code></pre><p>编写XML文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&quot;&gt;        &lt;!-- 使用设值注入方式装配Person实例 --&gt;        &lt;bean class=&quot;com.gls.entity.DataConfig&quot; id=&quot;config&quot;&gt;            &lt;property name=&quot;driverName&quot; value=&quot;Driver&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;url&quot; value=&quot;localhost:8080&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;        &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>class属性：用于指定Bean的来源，即创建要创建的Bean的class类（需要全限定名）；id属性：生成的bean的名字</p><p>测试</p><pre><code>package com.gls.controller;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @author guolisen * @date 2022年07月01日 1:18 */public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        Object config = classPathXmlApplicationContext.getBean(&quot;config&quot;);        System.out.println(config);    &#125;&#125;</code></pre><p>注解的方式是通过ClassPathXmlApplicationContext对象</p><p>通过配置类加注解的方式实现Ioc</p><p>用一个 Java 类来替代 XML 文件，把在 XML 中配置的内容放 到配置类中</p><p>创建配置类</p><pre><code>package com.gls.config;import com.gls.entity.DataConfig;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * @author guolisen * @date 2022年07月01日 2:08 */@Configurationpublic class BeanConfiguration &#123;    //@Bean(value = &quot;config&quot;)    @Bean    public DataConfig dataConfig()&#123;        DataConfig dataConfig = new DataConfig();        dataConfig.setDriverName(&quot;Driver&quot;);        dataConfig.setUrl(&quot;localhost:3306/dbname&quot;);        dataConfig.setUsername(&quot;root&quot;);        dataConfig.setPassword(&quot;root&quot;);        return dataConfig;    &#125;&#125;</code></pre><p>先通过注解@Configuration说明是一个配置类，然后在方法上标注@Bean注解，把return返回的对象注入到spring容器中</p><p>测试类</p><pre><code>package com.gls.controller;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @author guolisen * @date 2022年07月01日 1:18 */public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext classPathXmlApplicationContext = new AnnotationConfigApplicationContext(BeanConfiguration.class);        Object config = classPathXmlApplicationContext.getBean(&quot;dataConfig&quot;);        System.out.println(config);    &#125;&#125;</code></pre><p>当配置类只有一个时，我们可以传入当前配置类的class对象，当配置类有多个时，可以用包扫描的方式</p><p>通过注解加包扫描的方式实现Ioc</p><p>更简单的方式，不再需要依赖于 XML 或者配置类，而是直接 将 bean 的创建交给目标类，在目标类添加注解来创建</p><p>直接在实体对象中创建bean对象</p><pre><code>package com.gls.entity;import lombok.Data;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;/** * @author guolisen * @date 2022年07月01日 1:06 */@Data@Componentpublic class DataConfig &#123;    @Value(&quot;localhost:3306&quot;)    private String url;    @Value(&quot;Driver&quot;)    private String driverName;    @Value(&quot;root&quot;)    private String username;    @Value(&quot;root&quot;)    private String password;&#125;</code></pre><p>测试</p><pre><code>package com.gls.controller;import com.gls.config.BeanConfiguration;import com.gls.entity.DataConfig;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @author guolisen * @date 2022年07月01日 1:18 */public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext classPathXmlApplicationContext = new AnnotationConfigApplicationContext(&quot;com.gls.config&quot;);        Object config = classPathXmlApplicationContext.getBean(DataConfig.class);        System.out.println(config);    &#125;&#125;</code></pre><p>这里可以通过包扫描的方式发现bean</p><p>自动创建对象，完成依赖注入</p><p>创建实体类</p><pre><code>package com.gls.entity;import lombok.Data;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;/** * @author guolisen * @date 2022年07月01日 1:06 */@Data@Componentpublic class DataConfig &#123;    @Value(&quot;localhost:3306&quot;)    private String url;    @Value(&quot;Driver&quot;)    private String driverName;    @Value(&quot;root&quot;)    private String username;    @Value(&quot;root&quot;)    private String password;    @Autowired    //@Qualifier(&quot;user&quot;)    User user;&#125;</code></pre><p>@Autowired 通过类型进行注入，如果需要通过名称取值， 通过 @Qualifier 注解完成名称的映射</p><p>测试</p><pre><code>package com.gls.controller;import com.gls.config.BeanConfiguration;import com.gls.entity.DataConfig;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @author guolisen * @date 2022年07月01日 1:18 */public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext classPathXmlApplicationContext = new AnnotationConfigApplicationContext(&quot;com.gls.entity&quot;);        Object config = classPathXmlApplicationContext.getBean(DataConfig.class);        System.out.println(config);    &#125;&#125;</code></pre><p>aop</p><p>面向切面编程，是一种抽象化的面向对象编程，对面向对象 编程的一种补充，底层使用动态代理机制来实现 </p><p>1、打印日志 </p><p>2、事务</p><p>3、权限处理 打印日志 </p><p>业务代码和打印日志耦合起来</p><p>计算器方法中，日志和业务混合在一起，AOP 要做的就是将 日志代码全部抽象出去统一进行处理，计算器方法中只保留 核心的业务代码。 做到核心业务和非业务代码的解耦合</p><p>引入aspect依赖</p><pre><code> &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;            &lt;version&gt;5.3.20&lt;/version&gt;  &lt;/dependency&gt;</code></pre><p>创建切面类</p><pre><code>package com.gls.aop;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.springframework.stereotype.Component;import java.util.Arrays;/** * @author guolisen * @date 2022年07月01日 20:33 */@Component@Aspectpublic class LoggerAspect &#123;    @Before(&quot;execution(public int com.gls.aop.CalImpl.*(..))&quot;)    public void before(JoinPoint joinPoint)&#123;       // 2、实现类添加 @Component 注解        String name = joinPoint.getSignature().getName();        System.out.println(name+&quot;方法的参数是&quot;+ Arrays.toString(joinPoint.getArgs()));    &#125;    @AfterReturning(value = &quot;execution(public int com.gls.aop.CalImpl.*(..))&quot;,returning = &quot;result&quot;)    public void afterReturning(JoinPoint joinPoint,Object result)&#123;        String name = joinPoint.getSignature().getName();        System.out.println(name+&quot;方法的结果是&quot;+result);    &#125;&#125;</code></pre><p>编写接口</p><pre><code>package com.gls.aop;/** * @author guolisen * @date 2022年07月01日 20:45 */public interface Cal &#123;    public int add(int num1, int num2);    public int sub(int num1, int num2);    public int mul(int num1, int num2);    public int div(int num1, int num2);&#125;</code></pre><p>实现类添加 @Component 注解</p><pre><code>package com.gls.aop;import org.springframework.stereotype.Component;/** * @author guolisen * @date 2022年07月01日 20:48 */@Componentpublic class CalImpl implements Cal &#123;    @Override    public int add(int num1, int num2) &#123;        int result = num1 + num2;        return result;    &#125;    @Override    public int sub(int num1, int num2) &#123;        int result = num1 - num2;        return result;    &#125;    @Override    public int mul(int num1, int num2) &#123;        int result = num1 * num2;        return result;    &#125;    @Override    public int div(int num1, int num2) &#123;        int result = num1 / num2;        return result;    &#125;&#125;</code></pre><p>配置自动扫包，开启自动生成代理对象</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans        xmlns=&quot;http://www.springframework.org/schema/beans&quot;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;        xmlns:context=&quot;http://www.springframework.org/schema/context&quot;        xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;        xmlns:p=&quot;http://www.springframework.org/schema/p&quot;        xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd&quot;&gt;    &lt;!-- 自动扫包 --&gt;    &lt;context:component-scan base-package=&quot;com.gls.aop&quot;&gt;&lt;/context:component-scan&gt;        &lt;!-- 开启自动生成代理 --&gt;    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;&lt;/beans&gt;</code></pre><p>测试</p><pre><code>package com.gls.controller;import com.gls.aop.Cal;import com.gls.entity.DataConfig;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @author guolisen * @date 2022年07月01日 1:18 */public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;spring-aop.xml&quot;);        Cal bean = classPathXmlApplicationContext.getBean(Cal.class);        System.out.println(bean.add(9, 8));        System.out.println(bean.sub(9, 8));        System.out.println(bean.mul(9, 8));        System.out.println(bean.div(9, 8));    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring核心Ioc和aop&lt;/p&gt;
&lt;p&gt;通过xml文件的方式实现Ioc&lt;/p&gt;
&lt;p&gt;IoC是 Spring全家桶各个功能模块的基础，创建对象的容器。&lt;/p&gt;
&lt;p&gt;控制反转，将对象的创建进行反转，常规情况下，对象都是 开发者手动创建的，使用 IoC 开发者不再需要创</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus学习</title>
    <link href="http://example.com/2022/06/10/Mybatis-Plus%E5%AD%A6%E4%B9%A0-mybatis-plus-xue-xi/"/>
    <id>http://example.com/2022/06/10/Mybatis-Plus%E5%AD%A6%E4%B9%A0-mybatis-plus-xue-xi/</id>
    <published>2022-06-09T16:49:46.981Z</published>
    <updated>2022-06-09T16:51:23.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis-Plus第一个案例"><a href="#1-Mybatis-Plus第一个案例" class="headerlink" title="1.Mybatis-Plus第一个案例"></a>1.Mybatis-Plus第一个案例</h1><p>新建数据库<code>mybatis_plus</code>,创建user表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line"> id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,</span><br><span class="line"> name VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line"> age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line"> email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line"> PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>给表中添加数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM user;</span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),</span><br><span class="line">(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),</span><br><span class="line">(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),</span><br><span class="line">(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),</span><br><span class="line">(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</span><br></pre></td></tr></table></figure><p>用 Spring Initializr 快速初始化一个 Spring Boot 工程，勾选mysql驱动、Lombok依赖、mybatis-plus依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.7</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.gls&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;mybatis-plus&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;<span class="number">1.8</span>&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mybatis-plus--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.3</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;excludes&gt;</span><br><span class="line">                        &lt;exclude&gt;</span><br><span class="line">                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">                        &lt;/exclude&gt;</span><br><span class="line">                    &lt;/excludes&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>配置文件中添加mysql数据库相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#mysql数据库连接</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/mybatis_plus?serverTimezone=GMT</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>创建实体类以及mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls.mp.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年06月09日 22:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写业务逻辑类，自定义mapper接口继承<code>BaseMapper&lt;POJO&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.gls.mp.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年06月09日 22:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用的地方直接注入自定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls.mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gls.mp.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.gls.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        Iterator&lt;User&gt; iterator = users.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意要在启动类上添加<code>@MapperScan(value=&quot;com.gls.mp.mapper&quot;)</code></p></blockquote><p>配置日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h1 id="2-表与字段映射"><a href="#2-表与字段映射" class="headerlink" title="2.表与字段映射"></a>2.表与字段映射</h1><h1 id="3-主键生成策略"><a href="#3-主键生成策略" class="headerlink" title="3.主键生成策略"></a>3.主键生成策略</h1><ul><li>ASSIGN_ID<blockquote><p> 表示如果用户自己指定了id，就用用户自己指定的id，如果用户没有指定id，就使用默认的雪花算法生成的19位的唯一标识id</p></blockquote></li><li>AUTO 自增策略(auto)<blockquote><p>需要在创建数据表的时候设置主键自增，数据表类型是int、bigint类型</p></blockquote></li><li>input<blockquote><p>表示自己手动输入id</p></blockquote></li><li>none <blockquote><p>mp默认的主键生成策略，默认使用的是雪花算法生成递增的数值类型的19位的唯一标识符</p></blockquote></li><li>ASSIGN_UUID<blockquote><p>表示使用mp生成的uuid作为表的主键（字符串类型）</p></blockquote></li></ul><p>如果表中实体类属性和数据库中的表字段不一致(默认找的是与POJO类同名的数据表)，如果表名与实体属性类名不一致时应该怎么解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@TableName(value=&quot;tb_user&quot;)//mp中的注解，指定与当前pojo类映射的表名</span><br></pre></td></tr></table></figure><p>如果字段名与实体类属性名不一致时应该怎么解决?<br>①数据库中的字段名为<code>ai_hao</code>,实体类属性为<code>aiHao</code>,能直接查出来</p><blockquote><p>mp会自动把aiHao变成ai_hao(_后面的变成驼峰式大写来匹配)</p></blockquote><p>②数据库中的字段名为<code>ai_hao</code>,实体类属性为<code>hobby</code>,则不能直接查出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableFiled(value=&quot;ai_hao&quot;)</span> </span><br></pre></td></tr></table></figure><h1 id="3-字段的自动填充"><a href="#3-字段的自动填充" class="headerlink" title="3.字段的自动填充"></a>3.字段的自动填充</h1><p>在实体类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"> <span class="keyword">private</span> Date createTime;</span><br><span class="line"> <span class="comment">//@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line"> <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"> <span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p>实现元对象处理器接口</p><blockquote><p>注意：不要忘记添加 @Component 注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line"> <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Mybatis-Plus第一个案例&quot;&gt;&lt;a href=&quot;#1-Mybatis-Plus第一个案例&quot; class=&quot;headerlink&quot; title=&quot;1.Mybatis-Plus第一个案例&quot;&gt;&lt;/a&gt;1.Mybatis-Plus第一个案例&lt;/h1&gt;&lt;p&gt;新建</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
    <category term="Mybatis-Plus" scheme="http://example.com/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>书源</title>
    <link href="http://example.com/2022/05/28/%E4%B9%A6%E6%BA%90-shu-yuan/"/>
    <id>http://example.com/2022/05/28/%E4%B9%A6%E6%BA%90-shu-yuan/</id>
    <published>2022-05-28T15:13:18.152Z</published>
    <updated>2022-05-28T15:13:18.152Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/upload/2022/05/sourceModelList.xbs">香色闺阁</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/upload/2022/05/sourceModelList.xbs&quot;&gt;香色闺阁&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="书源" scheme="http://example.com/tags/%E4%B9%A6%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习</title>
    <link href="http://example.com/2022/05/13/Docker%E5%AD%A6%E4%B9%A0-docker-xue-xi/"/>
    <id>http://example.com/2022/05/13/Docker%E5%AD%A6%E4%B9%A0-docker-xue-xi/</id>
    <published>2022-05-13T14:55:15.734Z</published>
    <updated>2022-05-13T14:57:07.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h1><blockquote><p>前言</p></blockquote><p>不知道大家有没有过这样一种经历，就是写好的程序在自己本地电脑上能完美运行，在别人的电脑上总会因为环境问题出现各种各样的错误</p><h2 id="此前产品上线开发痛点"><a href="#此前产品上线开发痛点" class="headerlink" title="此前产品上线开发痛点"></a>此前产品上线开发痛点</h2><p>开发、上线两套环境</p><blockquote><p>在容器技术出来之前，我们使用的主要是虚拟技术。而我们最常见的虚拟技术，则是虚拟机，通过虚拟机我们可以在自己的电脑上虚拟出一台或者多台电脑，这样虚拟出来的电脑往往都非常笨重，会耗费大量的内存空间</p></blockquote><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>Docker本身也是一种虚拟化技术，Docker是一种虚拟化容器技术，它并不是模拟化一个完整的操作系统</p><h3 id="相比于传统的虚拟机技术，Docker的优点有"><a href="#相比于传统的虚拟机技术，Docker的优点有" class="headerlink" title="相比于传统的虚拟机技术，Docker的优点有"></a>相比于传统的虚拟机技术，Docker的优点有</h3><ul><li><p>应用更快速的交付和部署</p><blockquote><p>传统：一对帮助文档，安装程序。<br>Docker：打包镜像发布测试一键运行。</p></blockquote></li><li><p>便捷的升级和扩容</p><blockquote><p>使用了 Docker之后，我们部署应用就和搭积木一样<br>项目打包为一个镜像，扩展服务器A！服务器B</p></blockquote></li><li><p>更简单的系统运维</p><blockquote><p>在容器化之后，我们的开发，测试环境都是高度一致的</p></blockquote></li><li><p>更高效的计算资源利用</p><blockquote><p>Docker是内核级别的虚拟化，可以在一个物理机上可以运行很多的容器实例！服务器的性能可以被压榨到极致。</p></blockquote></li></ul><blockquote><p>Docker和虚拟技术的不同</p></blockquote><ul><li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</li><li>每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响</li></ul><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.卸载旧版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认是从国外的，不推荐</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推荐使用国内的</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4.安装docker相关的 docker-ce 社区版 而ee是企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5、启动docker</span></span><br><span class="line">docker systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6. 使用docker version查看是否按照成功</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7. 测试</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">8.查看一下下载的镜像</span></span><br><span class="line">docker images         </span><br></pre></td></tr></table></figure><h1 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/var/lib/docker 是docker的默认工作路径！</span></span><br></pre></td></tr></table></figure><h1 id="Docker的底层工作原理"><a href="#Docker的底层工作原理" class="headerlink" title="Docker的底层工作原理"></a>Docker的底层工作原理</h1><blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！<br>Docker-Server接收到Docker-Client的指令，就会执行这个命令！</p></blockquote><p><img src="/upload/2022/05/image.png" alt="image"></p><p>为什么Docker比VM快</p><ul><li>docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</li><li>docker利用的是宿主机的内核,而不需要Guest OS。</li></ul><p><img src="/upload/2022/05/image-1652452722368.png" alt="image-1652452722368"></p><h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version    #显示docker的版本信息。</span><br><span class="line"></span><br><span class="line">docker info       #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line"></span><br><span class="line">docker 命令 --help #帮助命令</span><br></pre></td></tr></table></figure><h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看所有本地主机上的镜像 可以使用docker image ls代替</span><br><span class="line"></span><br><span class="line">docker search 搜索镜像</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像</span> </span><br><span class="line">docker pull 镜像名[:tag]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">等价于</span></span><br><span class="line">docker pull tomcat:8</span><br><span class="line">docker pull docker.io/library/tomcat:8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除镜像</span></span><br><span class="line">docker rmi -f 镜像id #删除指定的镜像</span><br><span class="line">docker rmi -f 镜像id 镜像id 镜像id 镜像id#删除指定的镜像</span><br><span class="line">docker rmi -f $(docker images -aq) #删除全部的镜像</span><br></pre></td></tr></table></figure><h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id 新建容器并启动</span><br><span class="line"></span><br><span class="line">docker ps 列出所有运行的容器 docker container list</span><br><span class="line"></span><br><span class="line">docker rm 容器id 删除指定容器</span><br><span class="line"></span><br><span class="line">docker start 容器id #启动容器</span><br><span class="line"></span><br><span class="line">docker restart 容器id #重启容器</span><br><span class="line"></span><br><span class="line">docker stop 容器id #停止当前正在运行的容器</span><br><span class="line"></span><br><span class="line">docker kill 容器id #强制停止当前容器</span><br></pre></td></tr></table></figure><blockquote><p>说明：我们有了镜像才可以创建容器，Linux，下载centos镜像来学习</p></blockquote><ul><li>新建容器并启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker run [可选参数] image | docker container run [可选参数] image </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参书说明</span></span><br><span class="line">--name=&quot;Name&quot;容器名字 tomcat01 tomcat02 用来区分容器</span><br><span class="line">-d后台方式运行</span><br><span class="line">-it 使用交互方式运行，进入容器查看内容</span><br><span class="line">-p指定容器的端口 -p 8080(宿主机):8080(容器)</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 主机端口:容器端口(常用)</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P(大写) 随机指定端口</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试、启动并进入容器</span></span><br><span class="line">➜  ~ docker run -it centos /bin/bash</span><br><span class="line">Unable to find image &#x27;centos:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">8a29a15cefae: Already exists </span><br><span class="line">Digest: sha256:fe8d824220415eed5477b63addf40fb06c3b049404242b31982106ac204f6700</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">[root@95039813da8d /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@95039813da8d /]# exit #从容器退回主机</span><br><span class="line">exit</span><br><span class="line">➜  ~ ls</span><br><span class="line">shell  user.txt</span><br></pre></td></tr></table></figure><ul><li><p>列出所有运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker ps命令 <span class="comment">#列出当前正在运行的容器</span></span></span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line">  -n, --last int        Show n last created containers (includes all states) (default -1)</span><br><span class="line">  -q, --quiet           Only display numeric IDs</span><br><span class="line">  </span><br><span class="line">  ➜  ~ docker ps   </span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">68729e9654d4        portainer/portainer   &quot;/portainer&quot;             14 hours ago        Up About a minute   0.0.0.0:8088-&gt;9000/tcp   funny_curie</span><br><span class="line">d506a017e951        nginx                 &quot;nginx -g &#x27;daemon of…&quot;   15 hours ago        Up 15 hours         0.0.0.0:3344-&gt;80/tcp     nginx01</span><br><span class="line">➜  ~ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                       PORTS                    NAMES</span><br><span class="line">95039813da8d        centos                &quot;/bin/bash&quot;              3 minutes ago       Exited (0) 2 minutes ago                              condescending_pike</span><br><span class="line">1e46a426a5ba        tomcat                &quot;catalina.sh run&quot;        11 minutes ago      Exited (130) 9 minutes ago                            sweet_gould</span><br><span class="line">14bc9334d1b2        bf756fb1ae65          &quot;/hello&quot;                 3 hours ago         Exited (0) 3 hours ago                                amazing_stonebraker</span><br><span class="line">f10d60f473f5        bf756fb1ae65          &quot;/hello&quot;                 3 hours ago         Exited (0) 3 hours ago                                dreamy_germain</span><br><span class="line">68729e9654d4        portainer/portainer   &quot;/portainer&quot;             14 hours ago        Up About a minute            0.0.0.0:8088-&gt;9000/tcp   funny_curie</span><br><span class="line">677cde5e4f1d        elasticsearch         &quot;/docker-entrypoint.…&quot;   15 hours ago        Exited (143) 8 minutes ago                            elasticsearch</span><br><span class="line">33eb3f70b4db        tomcat                &quot;catalina.sh run&quot;        15 hours ago        Exited (143) 8 minutes ago                            tomcat01</span><br><span class="line">d506a017e951        nginx                 &quot;nginx -g &#x27;daemon of…&quot;   15 hours ago        Up 15 hours                  0.0.0.0:3344-&gt;80/tcp     nginx01</span><br><span class="line">24ce2db02e45        centos                &quot;/bin/bash&quot;              16 hours ago        Exited (0) 15 hours ago                               hopeful_faraday</span><br><span class="line">42267d1ad80b        bf756fb1ae65          &quot;/hello&quot;                 16 hours ago        Exited (0) 16 hours ago                               ecstatic_sutherland</span><br><span class="line">➜  ~ docker ps -aq</span><br><span class="line">95039813da8d</span><br><span class="line">1e46a426a5ba</span><br><span class="line">14bc9334d1b2</span><br><span class="line">f10d60f473f5</span><br><span class="line">68729e9654d4</span><br><span class="line">677cde5e4f1d</span><br><span class="line">33eb3f70b4db</span><br><span class="line">d506a017e951</span><br><span class="line">24ce2db02e45</span><br><span class="line">42267d1ad80b</span><br></pre></td></tr></table></figure></li><li><p>退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit #容器直接退出</span><br><span class="line"></span><br><span class="line">ctrl +P +Q #容器不停止退出</span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id   #删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rf</span><br><span class="line">docker rm -f $(docker ps -aq)  #删除指定的容器</span><br><span class="line">docker ps -a -q|xargs docker rm  #删除所有的容器</span><br></pre></td></tr></table></figure></li><li><p>启动和停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id#启动容器</span><br><span class="line">docker restart 容器id#重启容器</span><br><span class="line">docker stop 容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker概述&quot;&gt;&lt;a href=&quot;#Docker概述&quot; class=&quot;headerlink&quot; title=&quot;Docker概述&quot;&gt;&lt;/a&gt;Docker概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不知道大家有没有过</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>考研数学张宇</title>
    <link href="http://example.com/2022/05/13/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%BC%A0%E5%AE%87-kao-yan-shu-xue-zhang-yu/"/>
    <id>http://example.com/2022/05/13/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%BC%A0%E5%AE%87-kao-yan-shu-xue-zhang-yu/</id>
    <published>2022-05-13T13:59:52.904Z</published>
    <updated>2022-05-13T14:00:34.700Z</updated>
    
    <content type="html"><![CDATA[<p>洛必达法则</p><p>泰勒公式（泰勒展开式）</p><p>张宇老师数学整体框架</p><p>高等数学上</p><ul><li>1.预备知识</li><li>2.数列极限</li><li>3.函数极限</li></ul><p>上面是工具（用极限的方式）</p><ul><li><p>4.一元函数微分学的概念、性质与计算（求导，函数长什么样）</p></li><li><p>5.几何应用</p></li><li><p>6.中值定理（罗尔、拉格朗日、柯西、泰勒、费马）</p></li><li><p>7.零点问题与微分不等式</p></li><li><p>8.一元函数积分学的概念、性质与计算（求面积、体积，求测度）</p></li><li><p>9.几何应用</p></li><li><p>10.积分等式与不等式问题</p></li></ul><p>考研数学二主要考上面（高数上）</p><p>高等数学下</p><ul><li>11.多元微分学</li><li>12.二重积分</li></ul><p>数一、数二、数三公共考点</p><ul><li>13.常微分方程（按类求解，一个萝卜一个坑）</li></ul><p>微积分的应用（没有新的知识点）至此数学二结束（高数下）</p><ul><li>14.级数</li></ul><p>数一、数三考</p><ul><li>15.数一数二专题内容</li><li>16数三专题内容</li><li>17.多元积分基础知识</li><li>18.多重积分学</li></ul><p>数一完结</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;洛必达法则&lt;/p&gt;
&lt;p&gt;泰勒公式（泰勒展开式）&lt;/p&gt;
&lt;p&gt;张宇老师数学整体框架&lt;/p&gt;
&lt;p&gt;高等数学上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.预备知识&lt;/li&gt;
&lt;li&gt;2.数列极限&lt;/li&gt;
&lt;li&gt;3.函数极限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面是工具（用极限的方式）&lt;/</summary>
      
    
    
    
    <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java反射（二）</title>
    <link href="http://example.com/2022/01/25/Java%E5%8F%8D%E5%B0%84%EF%BC%88%E4%BA%8C%EF%BC%89-java-fan-she--er-/"/>
    <id>http://example.com/2022/01/25/Java%E5%8F%8D%E5%B0%84%EF%BC%88%E4%BA%8C%EF%BC%89-java-fan-she--er-/</id>
    <published>2022-01-25T10:12:16.395Z</published>
    <updated>2022-01-25T10:26:36.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>概念</p></blockquote><p>  反射是一种机制，利用该机制可以在程序运行过程中对类进行解剖并操作类中的所有成员(成员变量，成员方法，构造方法)</p><blockquote><p>使用反射操作类成员的前提</p></blockquote><p>  要获得该类字节码文件对象，就是Class对象</p><blockquote><p>Class对象的获取方式</p></blockquote><ul><li>方式1：通过类名.class获得</li><li>方式2：通过对象名.getClass()方法获得</li><li>方式3：通过Class类的静态方法获得： static Class forName(“类全名”)<blockquote><p>注意： 每一个类的Class对象都只有一个</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  反射是一种机制，利用该机制可以在程序运行过程中对类进行解剖并操作类中的所有成员(成员变量，成员方法，构造方法)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用反射操作类成员的前提&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java反射（一）</title>
    <link href="http://example.com/2022/01/25/Java%E5%8F%8D%E5%B0%84%EF%BC%88%E4%B8%80%EF%BC%89-java-fan-she--yi-/"/>
    <id>http://example.com/2022/01/25/Java%E5%8F%8D%E5%B0%84%EF%BC%88%E4%B8%80%EF%BC%89-java-fan-she--yi-/</id>
    <published>2022-01-25T08:29:03.023Z</published>
    <updated>2022-01-25T09:55:03.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h1><blockquote><p>当我们第一次使用某一个类时，会将此类的class文件读取到内存，并将此类<br>的所有信息存储到一个Class对象中</p></blockquote><h1 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h1><h2 id="1-创建类的实例"><a href="#1-创建类的实例" class="headerlink" title="1.创建类的实例"></a>1.创建类的实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student stu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是Student类的静态代码块,我被执行了.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行截图：<br><img src="http://sencho.oss-cn-beijing.aliyuncs.com/halo//01_1643097803366.png" alt="01.png"></p><blockquote><p>这里我们可以看出，如果Student类被加载了，那么它的静态代码块也一定会被执行一次，但是结果并不是这样，这是因为我们虽然在main函数中定义了Student类型的变量，但是我们并没有去使用它，所以不会被加载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.gls;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author gls</span><br><span class="line"> * @date 2022年01月25日 15:54</span><br><span class="line"> */</span><br><span class="line">public class Demo03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Student&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;我是Student类的静态代码块,我被执行了.......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们因为创建了Student类的实例对象，所以Student类的静态代码块被执行了</p></blockquote><h2 id="2-类的静态变量，或者为静态变量赋值"><a href="#2-类的静态变量，或者为静态变量赋值" class="headerlink" title="2.类的静态变量，或者为静态变量赋值"></a>2.类的静态变量，或者为静态变量赋值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.gls;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author gls</span><br><span class="line"> * @date 2022年01月25日 15:54</span><br><span class="line"> */</span><br><span class="line">public class Demo03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //new Student();</span><br><span class="line">        Student.str=&quot;hello world&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Student&#123;</span><br><span class="line">    static String str;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;我是Student类的静态代码块,我被执行了.......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-类的静态方法"><a href="#3-类的静态方法" class="headerlink" title="3.类的静态方法"></a>3.类的静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//Student.str=&quot;hello world&quot;;</span></span><br><span class="line">        Student.Method1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String str;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Method1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我被调用啦........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是Student类的静态代码块,我被执行了.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用反射方式来强制创建某个类或接口对应的java-lang-Class对象"><a href="#4-使用反射方式来强制创建某个类或接口对应的java-lang-Class对象" class="headerlink" title="4.使用反射方式来强制创建某个类或接口对应的java.lang.Class对象"></a>4.使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//Student.str=&quot;hello world&quot;;</span></span><br><span class="line">        <span class="comment">//Student.Method1();</span></span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.gls.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="comment">//    static String str;</span></span><br><span class="line"><span class="comment">//    static void Method1()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;我被调用啦........&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是Student类的静态代码块,我被执行了.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-初始化某个类的子类"><a href="#5-初始化某个类的子类" class="headerlink" title="5.初始化某个类的子类"></a>5.初始化某个类的子类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//Student.str=&quot;hello world&quot;;</span></span><br><span class="line">        <span class="comment">//Student.Method1();</span></span><br><span class="line">        <span class="comment">//Class&lt;?&gt; stu = Class.forName(&quot;com.gls.Student&quot;);</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SmallStudent</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="comment">//    static String str;</span></span><br><span class="line"><span class="comment">//    static void Method1()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;我被调用啦........&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是Student类的静态代码块,我被执行了.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallStudent</span> <span class="keyword">extends</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-直接使用java-exe命令来运行某个主类"><a href="#6-直接使用java-exe命令来运行某个主类" class="headerlink" title="6. 直接使用java.exe命令来运行某个主类"></a>6. 直接使用java.exe命令来运行某个主类</h2><blockquote><p>使用<code> javac Hello.java</code>命令编译产生字节码文件和<code>java Hello.java</code>命令加载字节码文件</p></blockquote><blockquote><p>注意：以上六种情况的任何一种，都可以导致JVM将一个类加载到方法区</p></blockquote><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><blockquote><p>类加载器：是负责将磁盘上的某个class文件读取到内存并生成Class的对象</p></blockquote><blockquote><p>Java中有三种类加载器，它们分别用于加载不同种类的class：</p></blockquote><ul><li><p>启动类加载器(Bootstrap ClassLoader)：用于加载系统类库<JAVA_HOME>\bin目录下的class，例如：rt.jar。</p></li><li><p>扩展类加载器(Extension ClassLoader)：用于加载扩展类库<JAVA_HOME>\lib\ext目录下的class。</p></li><li><p>应用程序类加载器(Application ClassLoader)：用于加载我们自定义类的加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类加载器:</span></span><br><span class="line"><span class="comment">    概述:是负责将磁盘上的某个class文件读取到内存并生成Class的对象。</span></span><br><span class="line"><span class="comment">    如何获取类加载器:类的字节码对象.getClassLoader()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">// 获取Test类的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c1</span> <span class="operator">=</span> Test.class.getClassLoader();</span><br><span class="line">        System.out.println(c1);<span class="comment">// AppClassLoader</span></span><br><span class="line">        <span class="comment">// 获取Student类的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c2</span> <span class="operator">=</span> Student.class.getClassLoader();</span><br><span class="line">        System.out.println(c2);<span class="comment">// AppClassLoader</span></span><br><span class="line">        <span class="comment">// 获取String类的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c3</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(c3);<span class="comment">// null</span></span><br><span class="line">        <span class="comment">//API中说明：一些实现可能使用null来表示引导类加载器。 如果此类由引导类加载器加载，则此方法将在此类实现中返回null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====================委派机制=================&quot;</span>);</span><br><span class="line">        System.out.println(c1.getParent());<span class="comment">// PlatformClassLoader</span></span><br><span class="line">        System.out.println(c1.getParent().getParent());<span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>补充：什么是双亲委派机制</p></blockquote></li><li><p>双亲委派机制是指一个类在收到类加载请求后不会尝试自己加载这个类，而是把该类加载请求向上委派给其父类加载器去完成，其父类加载器在接收到该类加载请求后又会将其委派给自己的父类，以此类推，这样所有的类加载请求都被向上委派到启动类加载器中。若父类加载器在接收到类加载请求后发现自己也无法加载该类（通常原因是该类的Class文件在父类的类加载路径中不存在），则父类会将该信息反馈给子类并向下委派子类加载器加载该类，直到该类被成功加载，若找不到该类，则JVM会抛出ClassNotFoud异常</p></li><li><p>工作原理：<br><img src="http://sencho.oss-cn-beijing.aliyuncs.com/halo//04_1643102306822.png" alt="04.png"></p></li></ul><blockquote><p>准备验证</p></blockquote><ul><li>新建一个<code>java.lang</code>包，创建一个String类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是自定义类String,我被加载了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新建一个测试类<code>StringTest</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 16:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        java.lang.<span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.String();</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://sencho.oss-cn-beijing.aliyuncs.com/halo//02_1643101644898.png" alt="02.png"><blockquote><p>可以看到我们自己定义的String类并没有被加载,这里就有个问题出来了，为什么JVM没有加载我们自定义的String类？</p></blockquote></li></ul><blockquote><p>执行过程：我们自己写的String类应该由系统类加载器加载，根据双亲委派机制原理，类的加载器会向上委派给自己的父类加载，请求最终将到达顶层的启动类加载器，到达启动类加载器后，启动类加载器会检查当前类属于哪个包下的类，检查出String类属于java.lang包下的类，启动类加载器会接管String类的加载，不会再向下委托，此时启动类加载器会接管String类的加载</p></blockquote><ul><li>测试StringTest类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 16:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        java.lang.<span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.String();</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world.......&quot;</span>);</span><br><span class="line">        <span class="type">StringTest</span> <span class="variable">stringTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTest</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        System.out.println(stringTest.getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><img src="http://sencho.oss-cn-beijing.aliyuncs.com/halo//05_1643103215023.png" alt="05"></p><blockquote><p>这时我们可以看出我们自定义的StringTest类是由系统类加载器加载的</p></blockquote><ul><li>测试自定义String类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gls;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月25日 16:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        java.lang.<span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.String();</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world.......&quot;</span>);</span><br><span class="line">        <span class="type">StringTest</span> <span class="variable">stringTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTest</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        System.out.println(stringTest.getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>代码运行截图：<br><img src="http://sencho.oss-cn-beijing.aliyuncs.com/halo//06_1643103737908.png" alt="06"><blockquote><p>为什么代码执行会报错，我想我们应该都知道了。String类最终会被引导类加载器加载，而核心api里面的String类没有main方法，所以代码会出现错误</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;类的加载&quot;&gt;&lt;a href=&quot;#类的加载&quot; class=&quot;headerlink&quot; title=&quot;类的加载&quot;&gt;&lt;/a&gt;类的加载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;当我们第一次使用某一个类时，会将此类的class文件读取到内存，并将此类&lt;br&gt;的所有信息存储到一</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    <category term="Java" scheme="http://example.com/categories/JVM/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之静态代理</title>
    <link href="http://example.com/2022/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86-dai-li-mo-shi-zhi-jing-tai-dai-li/"/>
    <id>http://example.com/2022/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86-dai-li-mo-shi-zhi-jing-tai-dai-li/</id>
    <published>2022-01-22T09:20:37.071Z</published>
    <updated>2022-01-22T10:35:24.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>编写interface接口</li><li>编写代理对象和被代理对象</li><li>两者都实现同一个接口，并重写接口方法</li><li>在代理对象中传入被代理对象实现类，在代理对象中通过被传入的被代理对象实现类调用被代理类对象中的方法，完成实现<blockquote><p>静态代理优点：可以做到在不修改目标对象的功能前提下,对目标功能扩展。<br>静态代理缺点：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护。</p></blockquote></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.gls;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author gls</span><br><span class="line"> * @date 2022年01月22日 16:18</span><br><span class="line"> */</span><br><span class="line">interface rentHouse&#123;</span><br><span class="line">    void renthouse();</span><br><span class="line">&#125;</span><br><span class="line">public class Proxy &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Company company = new Company(new master());</span><br><span class="line">        company.renthouse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class master implements rentHouse&#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void renthouse() &#123;</span><br><span class="line">            System.out.println(&quot;房屋主人要出租房屋......&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    static class Company implements rentHouse&#123;</span><br><span class="line">        private rentHouse house;</span><br><span class="line"></span><br><span class="line">        public Company(rentHouse house) &#123;</span><br><span class="line">            this.house = house;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void renthouse()  &#123;</span><br><span class="line">            after();</span><br><span class="line">            house.renthouse();</span><br><span class="line">            before();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void after() &#123;</span><br><span class="line">            System.out.println(&quot;房屋中介打听谁要租房.....&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void before() &#123;</span><br><span class="line">            System.out.println(&quot;完成了交易......&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码效果图<br><img src="http://sencho.oss-cn-beijing.aliyuncs.com/halo//%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86_1642846631191.png" alt="图1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;静态代理&quot;&gt;&lt;a href=&quot;#静态代理&quot; class=&quot;headerlink&quot; title=&quot;静态代理&quot;&gt;&lt;/a&gt;静态代理&lt;/h1&gt;&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>线程实现的三种方式</title>
    <link href="http://example.com/2022/01/22/%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F-xian-cheng-shi-xian-de-san-zhong-fang-shi/"/>
    <id>http://example.com/2022/01/22/%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F-xian-cheng-shi-xian-de-san-zhong-fang-shi/</id>
    <published>2022-01-22T08:12:17.860Z</published>
    <updated>2022-01-22T11:24:06.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><ul><li>什么是进程？<blockquote><p>执行程序的一次执行过程称为进程，它是一个动态的概念。一个进程可以有多个线程，比如你看一个视频能同时听见声音、图像和弹幕。一个进程中至少含有一个线程(主线程)</p></blockquote></li><li>什么是线程<blockquote><p>线程就是独立的执行路径，程序运行时即使自己没有创建线程，后台也会有多个线程，比如主线程和GC线程</p></blockquote></li></ul><h1 id="线程的三种实现方式"><a href="#线程的三种实现方式" class="headerlink" title="线程的三种实现方式"></a>线程的三种实现方式</h1><h2 id="一-继承Thread类"><a href="#一-继承Thread类" class="headerlink" title="一.继承Thread类"></a>一.继承Thread类</h2><p>步骤</p><ul><li>继承Thread类，实现run方法</li><li>创建线程对象</li><li>线程对象调用start方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.gls;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author gls</span><br><span class="line"> * @date 2022年01月17日 13:10</span><br><span class="line"> */</span><br><span class="line">//通过继承Thread类的方式实现多线程</span><br><span class="line">public class Demo01 extends Thread &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CreateThread createThread = new CreateThread();</span><br><span class="line">        createThread.start();</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            System.out.println(&quot;hahha&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class CreateThread extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        for (int i = 0; i &lt;1000 ; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二-实现Runnable接口"><a href="#二-实现Runnable接口" class="headerlink" title="二.实现Runnable接口"></a>二.实现Runnable接口</h2><p>步骤</p><ul><li>实现Runnable接口，重写run方法</li><li>创建Runnable接口实现类</li><li>执行线程需要丢入Runnable接口实现类</li><li>调用start方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.gls;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author gls</span><br><span class="line"> * @date 2022年01月17日 13:24</span><br><span class="line"> */</span><br><span class="line">public class Demo02 implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;my runnable running...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Thread2&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Demo02 demo02 = new Demo02();</span><br><span class="line">        Thread thread = new Thread(demo02);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(String.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三-实现Callable接口"><a href="#三-实现Callable接口" class="headerlink" title="三.实现Callable接口"></a>三.实现Callable接口</h2><p>步骤</p><ul><li>实现Callable接口需要返回值类型</li><li>重写call方法，需要抛出异常</li><li>创建目标对象</li><li>创建执行服务：ExecutorService &#x3D; Executor.newFixedThreadPool(1);</li><li>提交执行：Future result1 &#x3D; ser.submit(1);</li><li>获取结果：boolean r1 &#x3D; result.get()</li><li>关闭服务：ser.shutdownNow();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.gls;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author gls</span><br><span class="line"> * @date 2022年01月22日 16:04</span><br><span class="line"> */</span><br><span class="line">public class TestCallable implements Callable&lt;Boolean&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Boolean call() throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;thread创建成功....&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TestCallable callable = new TestCallable();</span><br><span class="line"></span><br><span class="line">        //创建执行服务</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(1);</span><br><span class="line">        //提交执行</span><br><span class="line">        Future&lt;Boolean&gt; result = service.submit(callable);</span><br><span class="line">        try &#123;</span><br><span class="line">            boolean isTrue = result.get();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：线程推荐创建方式有两种<code>继承Thread类</code>和<code>实现Runnable接口</code></p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程与线程&quot;&gt;&lt;a href=&quot;#进程与线程&quot; class=&quot;headerlink&quot; title=&quot;进程与线程&quot;&gt;&lt;/a&gt;进程与线程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;什么是进程？&lt;blockquote&gt;
&lt;p&gt;执行程序的一次执行过程称为进程，它是一个动态的概念。一个进程</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Centos8安装MySQL8</title>
    <link href="http://example.com/2022/01/22/Centos8%E5%AE%89%E8%A3%85MySQL8-centos8-an-zhuang-mysql8/"/>
    <id>http://example.com/2022/01/22/Centos8%E5%AE%89%E8%A3%85MySQL8-centos8-an-zhuang-mysql8/</id>
    <published>2022-01-22T05:42:18.579Z</published>
    <updated>2022-01-22T11:24:38.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>Centos8.2</li><li><h1 id="Mysql8-0-26"><a href="#Mysql8-0-26" class="headerlink" title="Mysql8.0.26"></a>Mysql8.0.26</h1></li></ul><h1 id="1-安装Mysql"><a href="#1-安装Mysql" class="headerlink" title="1. 安装Mysql"></a>1. 安装Mysql</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install @mysql</span><br><span class="line"></span><br><span class="line"># 设置开机自启动</span><br><span class="line">systemctl enable --now mysqld </span><br><span class="line"># 或者 sudo systemctl enable --now mysqld</span><br><span class="line"></span><br><span class="line"># 检查MySQL状态</span><br><span class="line">systemctl status mysqld</span><br><span class="line"># 或者 sudo systemctl status mysqld</span><br><span class="line"></span><br><span class="line"># 运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</span><br><span class="line">mysql_secure_installation</span><br><span class="line"># 或者 sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="命令运行后，根据命令行提示执行如下操作。"><a href="#命令运行后，根据命令行提示执行如下操作。" class="headerlink" title="命令运行后，根据命令行提示执行如下操作。"></a>命令运行后，根据命令行提示执行如下操作。</h3><ul><li><p>输入Y并回车开始相关配置。</p></li><li><p>选择密码验证策略强度，输入2并回车。</p><blockquote><p>策略0表示低，1表示中，2表示高。建议您选择高强度的密码验证策略。</p></blockquote></li><li><p>设置MySQL的新密码并确认。</p><blockquote><p>本示例设置密码PASSword123！。</p></blockquote></li><li><p>输入Y并回车继续使用提供的密码。</p></li><li><p>输入Y并回车移除匿名用户。</p></li><li><p>输入N并回车禁止root用户远程连接MySQL。</p></li><li><p>输入Y并回车删除test库以及对test库的访问权限。</p></li><li><p>输入Y并回车重新加载授权表。</p></li></ul><h1 id="2-配置Mysql远程登陆"><a href="#2-配置Mysql远程登陆" class="headerlink" title="2.配置Mysql远程登陆"></a>2.配置Mysql远程登陆</h1><h2 id="①本机登陆，输入以下命令登陆到MySQL中"><a href="#①本机登陆，输入以下命令登陆到MySQL中" class="headerlink" title="①本机登陆，输入以下命令登陆到MySQL中"></a>①本机登陆，输入以下命令登陆到MySQL中</h2><p><code>mysql -u root -p</code></p><blockquote><p>提示输入密码(即前面设置的密码PASSword123！)</p></blockquote><h2 id="②依次执行以下命令，将root用户的host字段设为’-’"><a href="#②依次执行以下命令，将root用户的host字段设为’-’" class="headerlink" title="②依次执行以下命令，将root用户的host字段设为’%’"></a>②依次执行以下命令，将root用户的host字段设为’%’</h2><blockquote><p>用户对应的主机是localhost，而不是%，所以不能连接。授权root用户可以远程登陆</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="③接着输入exit退出MySQL数据库"><a href="#③接着输入exit退出MySQL数据库" class="headerlink" title="③接着输入exit退出MySQL数据库"></a>③接着输入<code>exit</code>退出MySQL数据库</h2><h2 id="④查看是否开放3306端口，如果未开启3306端口，则需要手动开启"><a href="#④查看是否开放3306端口，如果未开启3306端口，则需要手动开启" class="headerlink" title="④查看是否开放3306端口，如果未开启3306端口，则需要手动开启"></a>④查看是否开放3306端口，如果未开启3306端口，则需要手动开启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=3306/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><blockquote><p>注意：MySQL会反向解析远程连接地址的dns记录，如果MySQL主机无法连接外网，则dns可能无法解析成功，导致第一次连接MySQL速度很慢，所以在配置中可以关闭该功能。</p></blockquote><p>打开&#x2F;etc&#x2F;my.cnf文件，添加以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Centos8.2&lt;/li&gt;
&lt;li&gt;&lt;h1 id=&quot;Mysql8-0-26&quot;&gt;&lt;a href=&quot;#Mysql8</summary>
      
    
    
    
    <category term="默认分类" scheme="http://example.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    <category term="操作系统" scheme="http://example.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://example.com/2022/01/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-linux-chang-yong-ming-ling/"/>
    <id>http://example.com/2022/01/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-linux-chang-yong-ming-ling/</id>
    <published>2022-01-22T05:02:23.713Z</published>
    <updated>2022-01-22T11:24:48.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-文件管理"><a href="#一-文件管理" class="headerlink" title="一. 文件管理"></a>一. 文件管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查找文件</span><br><span class="line">find / -name 文件名</span><br><span class="line"></span><br><span class="line"># 创建文件</span><br><span class="line">mkdir 文件名</span><br></pre></td></tr></table></figure><h1 id="二-系统用户管理"><a href="#二-系统用户管理" class="headerlink" title="二.系统用户管理"></a>二.系统用户管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># root用户切换普通用户</span><br><span class="line">su 普通用户名 </span><br></pre></td></tr></table></figure><blockquote><p>普同用户切换到root用户用 <code>exit</code>命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 普通用户使用root权限</span><br><span class="line">sudo yum install xxxxxx </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-文件管理&quot;&gt;&lt;a href=&quot;#一-文件管理&quot; class=&quot;headerlink&quot; title=&quot;一. 文件管理&quot;&gt;&lt;/a&gt;一. 文件管理&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="默认分类" scheme="http://example.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    <category term="操作系统" scheme="http://example.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello Halo</title>
    <link href="http://example.com/2022/01/22/Hello%20Halo-hello-halo/"/>
    <id>http://example.com/2022/01/22/Hello%20Halo-hello-halo/</id>
    <published>2022-01-21T17:06:38.665Z</published>
    <updated>2022-01-22T10:34:50.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-Halo"><a href="#Hello-Halo" class="headerlink" title="Hello Halo"></a>Hello Halo</h2><p>如果你看到了这一篇文章，那么证明你已经安装成功了，感谢使用 <a href="https://halo.run/">Halo</a> 进行创作，希望能够使用愉快。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li>官网：<a href="https://halo.run/">https://halo.run</a></li><li>文档：<a href="https://docs.halo.run/">https://docs.halo.run</a></li><li>社区：<a href="https://bbs.halo.run/">https://bbs.halo.run</a></li><li>主题仓库：<a href="https://halo.run/themes.html">https://halo.run/themes.html</a></li><li>开源地址：<a href="https://github.com/halo-dev/halo">https://github.com/halo-dev/halo</a></li></ul><p>在使用过程中，有任何问题都可以通过以上链接找寻答案，或者联系我们。</p><blockquote><p>这是一篇自动生成的文章，请删除这篇文章之后开始你的创作吧！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hello-Halo&quot;&gt;&lt;a href=&quot;#Hello-Halo&quot; class=&quot;headerlink&quot; title=&quot;Hello Halo&quot;&gt;&lt;/a&gt;Hello Halo&lt;/h2&gt;&lt;p&gt;如果你看到了这一篇文章，那么证明你已经安装成功了，感谢使用 &lt;a href=</summary>
      
    
    
    
    <category term="默认分类" scheme="http://example.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
</feed>
